
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftPOWERrightUMINUSCOMMA DATA DEF DIM DIVIDE END EQUALS FLOAT FOR GE GOSUB GOTO GT ID IF INTEGER LE LET LIST LPAREN LT MINUS NE NEW NEWLINE NEXT PLUS POWER PRINT READ REM RETURN RPAREN RUN SEMI STEP STOP STRING THEN TIMES TOprogram : program statement\n               | statementprogram : errorstatement : INTEGER command NEWLINEstatement : RUN NEWLINE\n                 | LIST NEWLINE\n                 | NEW NEWLINEstatement : INTEGER NEWLINEstatement : INTEGER error NEWLINEstatement : NEWLINEcommand : LET variable EQUALS exprcommand : LET variable EQUALS errorcommand : READ varlistcommand : READ errorcommand : DATA numlistcommand : DATA errorcommand : PRINT plist optendcommand : PRINT erroroptend : COMMA \n              | SEMI\n              |command : PRINTcommand : GOTO INTEGERcommand : GOTO errorcommand : IF relexpr THEN INTEGERcommand : IF error THEN INTEGERcommand : IF relexpr THEN errorcommand : FOR ID EQUALS expr TO expr optstepcommand : FOR ID EQUALS error TO expr optstepcommand : FOR ID EQUALS expr TO error optstepcommand : FOR ID EQUALS expr TO expr STEP erroroptstep : STEP expr\n               | emptycommand : NEXT IDcommand : NEXT errorcommand : ENDcommand : REMcommand : STOPcommand : DEF ID LPAREN ID RPAREN EQUALS exprcommand : DEF ID LPAREN ID RPAREN EQUALS errorcommand : DEF ID LPAREN error RPAREN EQUALS exprcommand : GOSUB INTEGERcommand : GOSUB errorcommand : RETURNcommand : DIM dimlistcommand : DIM errordimlist : dimlist COMMA dimitem\n               | dimitemdimitem : ID LPAREN INTEGER RPARENdimitem : ID LPAREN INTEGER COMMA INTEGER RPARENexpr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n            | expr POWER exprexpr : INTEGER\n            | FLOATexpr : variableexpr : LPAREN expr RPARENexpr : MINUS expr %prec UMINUSrelexpr : expr LT expr\n               | expr LE expr\n               | expr GT expr\n               | expr GE expr\n               | expr EQUALS expr\n               | expr NE exprvariable : ID\n              | ID LPAREN expr RPAREN\n              | ID LPAREN expr COMMA expr RPARENvarlist : varlist COMMA variable\n               | variablenumlist : numlist COMMA number\n               | numbernumber  : INTEGER\n               | FLOATnumber  : MINUS INTEGER\n               | MINUS FLOATplist   : plist COMMA pitem\n               | pitempitem : STRINGpitem : STRING exprpitem : exprempty : '
    
_lr_action_items = {'error':([0,4,14,15,16,17,18,20,25,27,69,86,94,95,127,137,142,],[3,12,36,39,45,55,57,61,64,66,99,111,120,122,135,148,152,]),'INTEGER':([0,1,2,3,5,9,11,15,16,17,18,25,28,29,30,31,32,43,47,49,53,69,70,72,76,79,80,81,82,83,86,87,88,89,90,91,92,93,94,97,126,127,128,132,137,138,142,145,],[4,4,-2,-3,-10,-1,-8,41,50,54,50,63,-5,-6,-7,-4,-9,73,50,50,50,50,50,41,50,50,50,50,50,50,110,112,50,50,50,50,50,50,50,124,50,50,50,139,50,50,50,50,]),'RUN':([0,1,2,3,5,9,11,28,29,30,31,32,],[6,6,-2,-3,-10,-1,-8,-5,-6,-7,-4,-9,]),'LIST':([0,1,2,3,5,9,11,28,29,30,31,32,],[7,7,-2,-3,-10,-1,-8,-5,-6,-7,-4,-9,]),'NEW':([0,1,2,3,5,9,11,28,29,30,31,32,],[8,8,-2,-3,-10,-1,-8,-5,-6,-7,-4,-9,]),'NEWLINE':([0,1,2,3,4,5,6,7,8,9,10,11,12,16,21,22,23,26,28,29,30,31,32,34,35,36,37,38,39,40,41,42,44,45,46,47,48,50,51,52,54,55,60,61,63,64,65,66,67,73,74,75,76,77,78,84,98,99,101,102,103,104,105,106,107,108,109,110,111,112,123,125,131,134,135,136,140,141,143,144,146,147,148,149,150,151,152,],[5,5,-2,-3,11,-10,28,29,30,-1,31,-8,32,-22,-36,-37,-38,-44,-5,-6,-7,-4,-9,-67,-13,-14,-71,-15,-16,-73,-74,-75,-21,-18,-79,-80,-82,-56,-57,-58,-23,-24,-34,-35,-42,-43,-45,-46,-48,-76,-77,-17,-19,-20,-81,-60,-11,-12,-70,-72,-78,-51,-52,-53,-54,-55,-59,-25,-27,-26,-47,-68,-49,-83,-83,-83,-69,-28,-33,-30,-29,-39,-40,-41,-50,-32,-31,]),'$end':([1,2,3,5,9,11,28,29,30,31,32,],[0,-2,-3,-10,-1,-8,-5,-6,-7,-4,-9,]),'LET':([4,],[13,]),'READ':([4,],[14,]),'DATA':([4,],[15,]),'PRINT':([4,],[16,]),'GOTO':([4,],[17,]),'IF':([4,],[18,]),'FOR':([4,],[19,]),'NEXT':([4,],[20,]),'END':([4,],[21,]),'REM':([4,],[22,]),'STOP':([4,],[23,]),'DEF':([4,],[24,]),'GOSUB':([4,],[25,]),'RETURN':([4,],[26,]),'DIM':([4,],[27,]),'ID':([13,14,16,18,19,20,24,27,47,49,53,69,70,71,76,79,80,81,82,83,88,89,90,91,92,93,94,95,96,126,127,128,137,138,142,145,],[34,34,34,34,59,60,62,68,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,121,68,34,34,34,34,34,34,34,]),'FLOAT':([15,16,18,43,47,49,53,69,70,72,76,79,80,81,82,83,88,89,90,91,92,93,94,126,127,128,137,138,142,145,],[42,51,51,74,51,51,51,51,51,42,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'MINUS':([15,16,18,34,47,48,49,50,51,52,53,58,69,70,72,76,78,79,80,81,82,83,84,85,88,89,90,91,92,93,94,98,100,104,105,106,107,108,109,113,114,115,116,117,118,119,125,126,127,128,133,134,136,137,138,140,142,145,147,149,151,],[43,49,49,-67,49,80,49,-56,-57,-58,49,80,49,49,43,49,80,49,49,49,49,49,-60,80,49,49,49,49,49,49,49,80,80,-51,-52,-53,-54,-55,-59,80,80,80,80,80,80,80,-68,49,49,49,80,80,80,49,49,-69,49,49,80,80,80,]),'STRING':([16,76,],[47,47,]),'LPAREN':([16,18,34,47,49,53,62,68,69,70,76,79,80,81,82,83,88,89,90,91,92,93,94,126,127,128,137,138,142,145,],[53,53,70,53,53,53,95,97,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'EQUALS':([33,34,50,51,52,58,59,84,104,105,106,107,108,109,125,129,130,140,],[69,-67,-56,-57,-58,92,94,-60,-51,-52,-53,-54,-55,-59,-68,137,138,-69,]),'COMMA':([34,35,37,38,40,41,42,44,46,47,48,50,51,52,65,67,73,74,78,84,100,101,102,103,104,105,106,107,108,109,123,124,125,131,140,150,],[-67,71,-71,72,-73,-74,-75,76,-79,-80,-82,-56,-57,-58,96,-48,-76,-77,-81,-60,126,-70,-72,-78,-51,-52,-53,-54,-55,-59,-47,132,-68,-49,-69,-50,]),'PLUS':([34,48,50,51,52,58,78,84,85,98,100,104,105,106,107,108,109,113,114,115,116,117,118,119,125,133,134,136,140,147,149,151,],[-67,79,-56,-57,-58,79,79,-60,79,79,79,-51,-52,-53,-54,-55,-59,79,79,79,79,79,79,79,-68,79,79,79,-69,79,79,79,]),'TIMES':([34,48,50,51,52,58,78,84,85,98,100,104,105,106,107,108,109,113,114,115,116,117,118,119,125,133,134,136,140,147,149,151,],[-67,81,-56,-57,-58,81,81,-60,81,81,81,81,81,-53,-54,-55,-59,81,81,81,81,81,81,81,-68,81,81,81,-69,81,81,81,]),'DIVIDE':([34,48,50,51,52,58,78,84,85,98,100,104,105,106,107,108,109,113,114,115,116,117,118,119,125,133,134,136,140,147,149,151,],[-67,82,-56,-57,-58,82,82,-60,82,82,82,82,82,-53,-54,-55,-59,82,82,82,82,82,82,82,-68,82,82,82,-69,82,82,82,]),'POWER':([34,48,50,51,52,58,78,84,85,98,100,104,105,106,107,108,109,113,114,115,116,117,118,119,125,133,134,136,140,147,149,151,],[-67,83,-56,-57,-58,83,83,-60,83,83,83,83,83,83,83,-55,-59,83,83,83,83,83,83,83,-68,83,83,83,-69,83,83,83,]),'SEMI':([34,44,46,47,48,50,51,52,78,84,103,104,105,106,107,108,109,125,140,],[-67,77,-79,-80,-82,-56,-57,-58,-81,-60,-78,-51,-52,-53,-54,-55,-59,-68,-69,]),'LT':([34,50,51,52,58,84,104,105,106,107,108,109,125,140,],[-67,-56,-57,-58,88,-60,-51,-52,-53,-54,-55,-59,-68,-69,]),'LE':([34,50,51,52,58,84,104,105,106,107,108,109,125,140,],[-67,-56,-57,-58,89,-60,-51,-52,-53,-54,-55,-59,-68,-69,]),'GT':([34,50,51,52,58,84,104,105,106,107,108,109,125,140,],[-67,-56,-57,-58,90,-60,-51,-52,-53,-54,-55,-59,-68,-69,]),'GE':([34,50,51,52,58,84,104,105,106,107,108,109,125,140,],[-67,-56,-57,-58,91,-60,-51,-52,-53,-54,-55,-59,-68,-69,]),'NE':([34,50,51,52,58,84,104,105,106,107,108,109,125,140,],[-67,-56,-57,-58,93,-60,-51,-52,-53,-54,-55,-59,-68,-69,]),'RPAREN':([34,50,51,52,84,85,100,104,105,106,107,108,109,121,122,124,125,133,139,140,],[-67,-56,-57,-58,-60,109,125,-51,-52,-53,-54,-55,-59,129,130,131,-68,140,150,-69,]),'THEN':([34,50,51,52,56,57,84,104,105,106,107,108,109,113,114,115,116,117,118,125,140,],[-67,-56,-57,-58,86,87,-60,-51,-52,-53,-54,-55,-59,-61,-62,-63,-64,-65,-66,-68,-69,]),'TO':([34,50,51,52,84,104,105,106,107,108,109,119,120,125,140,],[-67,-56,-57,-58,-60,-51,-52,-53,-54,-55,-59,127,128,-68,-69,]),'STEP':([34,50,51,52,84,104,105,106,107,108,109,125,134,135,136,140,],[-67,-56,-57,-58,-60,-51,-52,-53,-54,-55,-59,-68,142,145,145,-69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,9,]),'command':([4,],[10,]),'variable':([13,14,16,18,47,49,53,69,70,71,76,79,80,81,82,83,88,89,90,91,92,93,94,126,127,128,137,138,142,145,],[33,37,52,52,52,52,52,52,52,101,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'varlist':([14,],[35,]),'numlist':([15,],[38,]),'number':([15,72,],[40,102,]),'plist':([16,],[44,]),'pitem':([16,76,],[46,103,]),'expr':([16,18,47,49,53,69,70,76,79,80,81,82,83,88,89,90,91,92,93,94,126,127,128,137,138,142,145,],[48,58,78,84,85,98,100,48,104,105,106,107,108,113,114,115,116,117,118,119,133,134,136,147,149,151,151,]),'relexpr':([18,],[56,]),'dimlist':([27,],[65,]),'dimitem':([27,96,],[67,123,]),'optend':([44,],[75,]),'optstep':([134,135,136,],[141,144,146,]),'empty':([134,135,136,],[143,143,143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','basparse.py',21),
  ('program -> statement','program',1,'p_program','basparse.py',22),
  ('program -> error','program',1,'p_program_error','basparse.py',41),
  ('statement -> INTEGER command NEWLINE','statement',3,'p_statement','basparse.py',49),
  ('statement -> RUN NEWLINE','statement',2,'p_statement_interactive','basparse.py',62),
  ('statement -> LIST NEWLINE','statement',2,'p_statement_interactive','basparse.py',63),
  ('statement -> NEW NEWLINE','statement',2,'p_statement_interactive','basparse.py',64),
  ('statement -> INTEGER NEWLINE','statement',2,'p_statement_blank','basparse.py',71),
  ('statement -> INTEGER error NEWLINE','statement',3,'p_statement_bad','basparse.py',78),
  ('statement -> NEWLINE','statement',1,'p_statement_newline','basparse.py',87),
  ('command -> LET variable EQUALS expr','command',4,'p_command_let','basparse.py',94),
  ('command -> LET variable EQUALS error','command',4,'p_command_let_bad','basparse.py',99),
  ('command -> READ varlist','command',2,'p_command_read','basparse.py',106),
  ('command -> READ error','command',2,'p_command_read_bad','basparse.py',111),
  ('command -> DATA numlist','command',2,'p_command_data','basparse.py',118),
  ('command -> DATA error','command',2,'p_command_data_bad','basparse.py',123),
  ('command -> PRINT plist optend','command',3,'p_command_print','basparse.py',130),
  ('command -> PRINT error','command',2,'p_command_print_bad','basparse.py',135),
  ('optend -> COMMA','optend',1,'p_optend','basparse.py',142),
  ('optend -> SEMI','optend',1,'p_optend','basparse.py',143),
  ('optend -> <empty>','optend',0,'p_optend','basparse.py',144),
  ('command -> PRINT','command',1,'p_command_print_empty','basparse.py',154),
  ('command -> GOTO INTEGER','command',2,'p_command_goto','basparse.py',161),
  ('command -> GOTO error','command',2,'p_command_goto_bad','basparse.py',166),
  ('command -> IF relexpr THEN INTEGER','command',4,'p_command_if','basparse.py',173),
  ('command -> IF error THEN INTEGER','command',4,'p_command_if_bad','basparse.py',178),
  ('command -> IF relexpr THEN error','command',4,'p_command_if_bad2','basparse.py',183),
  ('command -> FOR ID EQUALS expr TO expr optstep','command',7,'p_command_for','basparse.py',190),
  ('command -> FOR ID EQUALS error TO expr optstep','command',7,'p_command_for_bad_initial','basparse.py',195),
  ('command -> FOR ID EQUALS expr TO error optstep','command',7,'p_command_for_bad_final','basparse.py',200),
  ('command -> FOR ID EQUALS expr TO expr STEP error','command',8,'p_command_for_bad_step','basparse.py',205),
  ('optstep -> STEP expr','optstep',2,'p_optstep','basparse.py',212),
  ('optstep -> empty','optstep',1,'p_optstep','basparse.py',213),
  ('command -> NEXT ID','command',2,'p_command_next','basparse.py',223),
  ('command -> NEXT error','command',2,'p_command_next_bad','basparse.py',229),
  ('command -> END','command',1,'p_command_end','basparse.py',236),
  ('command -> REM','command',1,'p_command_rem','basparse.py',243),
  ('command -> STOP','command',1,'p_command_stop','basparse.py',250),
  ('command -> DEF ID LPAREN ID RPAREN EQUALS expr','command',7,'p_command_def','basparse.py',257),
  ('command -> DEF ID LPAREN ID RPAREN EQUALS error','command',7,'p_command_def_bad_rhs','basparse.py',262),
  ('command -> DEF ID LPAREN error RPAREN EQUALS expr','command',7,'p_command_def_bad_arg','basparse.py',267),
  ('command -> GOSUB INTEGER','command',2,'p_command_gosub','basparse.py',274),
  ('command -> GOSUB error','command',2,'p_command_gosub_bad','basparse.py',279),
  ('command -> RETURN','command',1,'p_command_return','basparse.py',286),
  ('command -> DIM dimlist','command',2,'p_command_dim','basparse.py',293),
  ('command -> DIM error','command',2,'p_command_dim_bad','basparse.py',298),
  ('dimlist -> dimlist COMMA dimitem','dimlist',3,'p_dimlist','basparse.py',305),
  ('dimlist -> dimitem','dimlist',1,'p_dimlist','basparse.py',306),
  ('dimitem -> ID LPAREN INTEGER RPAREN','dimitem',4,'p_dimitem_single','basparse.py',317),
  ('dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN','dimitem',6,'p_dimitem_double','basparse.py',322),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','basparse.py',329),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','basparse.py',330),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binary','basparse.py',331),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binary','basparse.py',332),
  ('expr -> expr POWER expr','expr',3,'p_expr_binary','basparse.py',333),
  ('expr -> INTEGER','expr',1,'p_expr_number','basparse.py',339),
  ('expr -> FLOAT','expr',1,'p_expr_number','basparse.py',340),
  ('expr -> variable','expr',1,'p_expr_variable','basparse.py',345),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','basparse.py',350),
  ('expr -> MINUS expr','expr',2,'p_expr_unary','basparse.py',355),
  ('relexpr -> expr LT expr','relexpr',3,'p_relexpr','basparse.py',362),
  ('relexpr -> expr LE expr','relexpr',3,'p_relexpr','basparse.py',363),
  ('relexpr -> expr GT expr','relexpr',3,'p_relexpr','basparse.py',364),
  ('relexpr -> expr GE expr','relexpr',3,'p_relexpr','basparse.py',365),
  ('relexpr -> expr EQUALS expr','relexpr',3,'p_relexpr','basparse.py',366),
  ('relexpr -> expr NE expr','relexpr',3,'p_relexpr','basparse.py',367),
  ('variable -> ID','variable',1,'p_variable','basparse.py',374),
  ('variable -> ID LPAREN expr RPAREN','variable',4,'p_variable','basparse.py',375),
  ('variable -> ID LPAREN expr COMMA expr RPAREN','variable',6,'p_variable','basparse.py',376),
  ('varlist -> varlist COMMA variable','varlist',3,'p_varlist','basparse.py',388),
  ('varlist -> variable','varlist',1,'p_varlist','basparse.py',389),
  ('numlist -> numlist COMMA number','numlist',3,'p_numlist','basparse.py',400),
  ('numlist -> number','numlist',1,'p_numlist','basparse.py',401),
  ('number -> INTEGER','number',1,'p_number','basparse.py',413),
  ('number -> FLOAT','number',1,'p_number','basparse.py',414),
  ('number -> MINUS INTEGER','number',2,'p_number_signed','basparse.py',421),
  ('number -> MINUS FLOAT','number',2,'p_number_signed','basparse.py',422),
  ('plist -> plist COMMA pitem','plist',3,'p_plist','basparse.py',430),
  ('plist -> pitem','plist',1,'p_plist','basparse.py',431),
  ('pitem -> STRING','pitem',1,'p_item_string','basparse.py',440),
  ('pitem -> STRING expr','pitem',2,'p_item_string_expr','basparse.py',445),
  ('pitem -> expr','pitem',1,'p_item_expr','basparse.py',450),
  ('empty -> <empty>','empty',0,'p_empty','basparse.py',457),
]
