
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'commandleftPLUSMINUSleftTIMESDIVISIONleftCOMMAAND BOOLEAN COMMA DIVISION ELSE END END_SCOPE EQUAL GE GT IDENTIFIER IF INTEGER LE LT MINUS MODULO NOT NOT_EQUAL OPEN_SCOPE OR PLUS PREDEFINED_IDENTIFIER REAL REGISTER TIMES VARIABLE_TYPE WHILEcommand : variable_declaration END\n               | variable_attribution END\n               | command command END\n               | register_command END\n               | if_conditional\n               | else_conditional\n               | OPEN_SCOPE\n               | END_SCOPE\n               | loop\n               loop : WHILE "(" logic_expression ")" OPEN_SCOPEif_conditional : IF "(" logic_expression ")" OPEN_SCOPEelse_conditional : END_SCOPE ELSE OPEN_SCOPEregister_command : REGISTER "(" expression ")"arithmetic_operator : PLUS\n                           | MINUS\n                           | TIMES\n                           | DIVISION\n                           | MODULObinary_logic_operator : AND\n                             | ORunary_logic_operator : NOTcomparative_operator : GT\n                            | LT\n                            | GE\n                            | LE\n                            | EQUAL\n                            | NOT_EQUALunary_operator : unary_logic_operatorbinary_operator : arithmetic_operator\n                       | comparative_operator\n                       | binary_logic_operatornote : "(" REAL COMMA REAL COMMA INTEGER ")"integer_list : INTEGER\n                    | integer_list COMMA INTEGERscale : "[" integer_list "]"chord : "(" INTEGER COMMA INTEGER COMMA INTEGER ")"chord_list : chord\n                  | chord_list COMMA chordharmonic_field : "[" chord_list "]"note_list : note\n                 | note_list COMMA notemusic : "(" "[" note_list "]" COMMA REAL ")"\n             | "(" "[" "]" COMMA REAL ")" variable_attribution : IDENTIFIER "=" expressionvariable_declaration : VARIABLE_TYPE IDENTIFIER "=" expressionliteral : INTEGER\n               | REAL\n               | BOOLEAN\n               | note\n               | scale\n               | chord\n               | harmonic_field\n               | musicexpression : arithmetic_expression\n                  | logic_expression\n                  | literal\n                  | builtin_functionsbuiltin_functions : PREDEFINED_IDENTIFIER "(" params_list ")"params_list : expression\n                   | params_list COMMA expressionarithmetic_expression : arithmetic_literal\n                             | "(" arithmetic_expression ")"\n                             | IDENTIFIER\n                             | arithmetic_expression arithmetic_operator arithmetic_expressionlogic_expression : BOOLEAN\n                        | IDENTIFIER\n                        | "(" logic_expression ")"\n                        | "(" arithmetic_expression comparative_operator arithmetic_expression ")"\n                        | logic_expression binary_logic_operator logic_expression\n                        | unary_logic_operator logic_expressionarithmetic_literal : REAL\n                          | INTEGER'
    
_lr_action_items = {'OPEN_SCOPE':([0,1,5,6,7,8,9,15,16,17,18,19,25,26,83,84,112,113,],[7,7,-5,-6,-7,-8,-9,7,-1,-2,-4,26,-3,-12,112,113,-11,-10,]),'END_SCOPE':([0,1,5,6,7,8,9,15,16,17,18,25,26,112,113,],[8,8,-5,-6,-7,-8,-9,8,-1,-2,-4,-3,-12,-11,-10,]),'VARIABLE_TYPE':([0,1,5,6,7,8,9,15,16,17,18,25,26,112,113,],[10,10,-5,-6,-7,-8,-9,10,-1,-2,-4,-3,-12,-11,-10,]),'IDENTIFIER':([0,1,5,6,7,8,9,10,15,16,17,18,21,22,23,24,25,26,27,35,37,46,49,55,56,57,58,59,60,61,62,63,64,71,78,86,90,91,92,93,94,95,96,112,113,123,],[11,11,-5,-6,-7,-8,-9,20,11,-1,-2,-4,28,28,52,52,-3,-12,28,28,52,-21,80,87,-14,-15,-16,-17,-18,52,-19,-20,28,28,80,87,87,-22,-23,-24,-25,-26,-27,-11,-10,28,]),'REGISTER':([0,1,5,6,7,8,9,15,16,17,18,25,26,112,113,],[12,12,-5,-6,-7,-8,-9,12,-1,-2,-4,-3,-12,-11,-10,]),'IF':([0,1,5,6,7,8,9,15,16,17,18,25,26,112,113,],[13,13,-5,-6,-7,-8,-9,13,-1,-2,-4,-3,-12,-11,-10,]),'WHILE':([0,1,5,6,7,8,9,15,16,17,18,25,26,112,113,],[14,14,-5,-6,-7,-8,-9,14,-1,-2,-4,-3,-12,-11,-10,]),'$end':([1,5,6,7,8,9,16,17,18,25,26,112,113,],[0,-5,-6,-7,-8,-9,-1,-2,-4,-3,-12,-11,-10,]),'END':([2,3,4,5,6,7,8,9,15,16,17,18,25,26,28,29,30,31,32,33,34,36,38,39,40,41,42,43,44,51,52,54,70,77,81,82,85,87,88,89,97,106,108,112,113,122,126,136,137,138,139,],[16,17,18,-5,-6,-7,-8,-9,25,-1,-2,-4,-3,-12,-63,-44,-54,-55,-56,-57,-61,-48,-46,-47,-49,-50,-51,-52,-53,-65,-66,-45,-70,-13,-71,-72,-64,-63,-69,-62,-67,-35,-39,-11,-10,-58,-68,-43,-32,-36,-42,]),'ELSE':([8,],[19,]),'=':([11,20,],[21,27,]),'(':([12,13,14,21,22,23,24,27,35,37,45,46,47,49,55,56,57,58,59,60,61,62,63,64,69,71,78,86,90,91,92,93,94,95,96,109,120,123,],[22,23,24,35,35,49,49,35,64,49,71,-21,76,78,86,-14,-15,-16,-17,-18,49,-19,-20,64,100,35,78,86,86,-22,-23,-24,-25,-26,-27,76,100,35,]),'BOOLEAN':([21,22,23,24,27,35,37,46,49,61,62,63,64,71,78,123,],[36,36,51,51,36,51,51,-21,51,51,-19,-20,51,36,51,36,]),'INTEGER':([21,22,27,35,47,49,55,56,57,58,59,60,64,71,76,78,86,90,91,92,93,94,95,96,99,107,123,127,128,],[38,38,38,68,74,82,82,-14,-15,-16,-17,-18,82,38,110,82,82,82,-22,-23,-24,-25,-26,-27,117,124,38,133,134,]),'REAL':([21,22,27,35,49,55,56,57,58,59,60,64,71,78,86,90,91,92,93,94,95,96,98,100,121,123,129,],[39,39,39,67,81,81,-14,-15,-16,-17,-18,81,39,81,81,81,-22,-23,-24,-25,-26,-27,116,118,131,39,135,]),'PREDEFINED_IDENTIFIER':([21,22,27,71,123,],[45,45,45,45,45,]),'NOT':([21,22,23,24,27,35,37,46,49,61,62,63,64,71,78,123,],[46,46,46,46,46,46,46,-21,46,46,-19,-20,46,46,46,46,]),'[':([21,22,27,35,71,123,],[47,47,47,69,47,47,]),'PLUS':([28,30,34,38,39,65,67,68,79,80,81,82,85,87,89,111,114,115,],[-63,56,-61,-72,-71,56,-71,-72,56,-63,-71,-72,56,-63,-62,56,56,56,]),'MINUS':([28,30,34,38,39,65,67,68,79,80,81,82,85,87,89,111,114,115,],[-63,57,-61,-72,-71,57,-71,-72,57,-63,-71,-72,57,-63,-62,57,57,57,]),'TIMES':([28,30,34,38,39,65,67,68,79,80,81,82,85,87,89,111,114,115,],[-63,58,-61,-72,-71,58,-71,-72,58,-63,-71,-72,58,-63,-62,58,58,58,]),'DIVISION':([28,30,34,38,39,65,67,68,79,80,81,82,85,87,89,111,114,115,],[-63,59,-61,-72,-71,59,-71,-72,59,-63,-71,-72,59,-63,-62,59,59,59,]),'MODULO':([28,30,34,38,39,65,67,68,79,80,81,82,85,87,89,111,114,115,],[-63,60,-61,-72,-71,60,-71,-72,60,-63,-71,-72,60,-63,-62,60,60,60,]),')':([28,30,31,32,33,34,36,38,39,40,41,42,43,44,48,50,51,52,53,65,66,67,68,70,80,81,82,85,87,88,89,97,104,105,106,108,111,114,115,122,126,131,132,133,134,135,136,137,138,139,],[-63,-54,-55,-56,-57,-61,-48,-46,-47,-49,-50,-51,-52,-53,77,83,-65,-66,84,89,97,-71,-72,-70,-63,-71,-72,-64,-63,-69,-62,-67,122,-59,-35,-39,89,89,126,-58,-68,136,-60,137,138,139,-43,-32,-36,-42,]),'GT':([28,34,65,67,68,79,80,81,82,85,87,89,111,],[-63,-61,91,-71,-72,91,-63,-71,-72,-64,-63,-62,91,]),'LT':([28,34,65,67,68,79,80,81,82,85,87,89,111,],[-63,-61,92,-71,-72,92,-63,-71,-72,-64,-63,-62,92,]),'GE':([28,34,65,67,68,79,80,81,82,85,87,89,111,],[-63,-61,93,-71,-72,93,-63,-71,-72,-64,-63,-62,93,]),'LE':([28,34,65,67,68,79,80,81,82,85,87,89,111,],[-63,-61,94,-71,-72,94,-63,-71,-72,-64,-63,-62,94,]),'EQUAL':([28,34,65,67,68,79,80,81,82,85,87,89,111,],[-63,-61,95,-71,-72,95,-63,-71,-72,-64,-63,-62,95,]),'NOT_EQUAL':([28,34,65,67,68,79,80,81,82,85,87,89,111,],[-63,-61,96,-71,-72,96,-63,-71,-72,-64,-63,-62,96,]),'COMMA':([28,30,31,32,33,34,36,38,39,40,41,42,43,44,51,52,67,68,70,72,73,74,75,81,82,85,87,88,89,97,101,102,103,104,105,106,108,110,116,117,118,119,122,124,125,126,130,132,136,137,138,139,],[-63,-54,-55,-56,-57,-61,-48,-46,-47,-49,-50,-51,-52,-53,-65,-66,98,99,-70,107,109,-33,-37,-71,-72,-64,-63,-69,-62,-67,120,121,-40,123,-59,-35,-39,99,127,128,98,129,-58,-34,-38,-68,-41,-60,-43,-32,-36,-42,]),'AND':([28,31,36,50,51,52,53,66,70,80,88,97,126,],[-66,62,-65,62,-65,-66,62,62,62,-66,62,-67,-68,]),'OR':([28,31,36,50,51,52,53,66,70,80,88,97,126,],[-66,63,-65,63,-65,-66,63,63,63,-66,63,-67,-68,]),']':([69,72,73,74,75,101,103,124,125,130,137,138,],[102,106,108,-33,-37,119,-40,-34,-38,-41,-32,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'command':([0,1,15,],[1,15,15,]),'variable_declaration':([0,1,15,],[2,2,2,]),'variable_attribution':([0,1,15,],[3,3,3,]),'register_command':([0,1,15,],[4,4,4,]),'if_conditional':([0,1,15,],[5,5,5,]),'else_conditional':([0,1,15,],[6,6,6,]),'loop':([0,1,15,],[9,9,9,]),'expression':([21,22,27,71,123,],[29,48,54,105,132,]),'arithmetic_expression':([21,22,27,35,49,55,64,71,78,86,90,123,],[30,30,30,65,79,85,65,30,111,114,115,30,]),'logic_expression':([21,22,23,24,27,35,37,49,61,64,71,78,123,],[31,31,50,53,31,66,70,66,88,66,31,66,31,]),'literal':([21,22,27,71,123,],[32,32,32,32,32,]),'builtin_functions':([21,22,27,71,123,],[33,33,33,33,33,]),'arithmetic_literal':([21,22,27,35,49,55,64,71,78,86,90,123,],[34,34,34,34,34,34,34,34,34,34,34,34,]),'unary_logic_operator':([21,22,23,24,27,35,37,49,61,64,71,78,123,],[37,37,37,37,37,37,37,37,37,37,37,37,37,]),'note':([21,22,27,69,71,120,123,],[40,40,40,103,40,130,40,]),'scale':([21,22,27,71,123,],[41,41,41,41,41,]),'chord':([21,22,27,47,71,109,123,],[42,42,42,75,42,125,42,]),'harmonic_field':([21,22,27,71,123,],[43,43,43,43,43,]),'music':([21,22,27,71,123,],[44,44,44,44,44,]),'arithmetic_operator':([30,65,79,85,111,114,115,],[55,55,55,55,55,55,55,]),'binary_logic_operator':([31,50,53,66,70,88,],[61,61,61,61,61,61,]),'integer_list':([47,],[72,]),'chord_list':([47,],[73,]),'comparative_operator':([65,79,111,],[90,90,90,]),'note_list':([69,],[101,]),'params_list':([71,],[104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> command","S'",1,None,None,None),
  ('command -> variable_declaration END','command',2,'p_command','mozart_parser.py',28),
  ('command -> variable_attribution END','command',2,'p_command','mozart_parser.py',29),
  ('command -> command command END','command',3,'p_command','mozart_parser.py',30),
  ('command -> register_command END','command',2,'p_command','mozart_parser.py',31),
  ('command -> if_conditional','command',1,'p_command','mozart_parser.py',32),
  ('command -> else_conditional','command',1,'p_command','mozart_parser.py',33),
  ('command -> OPEN_SCOPE','command',1,'p_command','mozart_parser.py',34),
  ('command -> END_SCOPE','command',1,'p_command','mozart_parser.py',35),
  ('command -> loop','command',1,'p_command','mozart_parser.py',36),
  ('loop -> WHILE ( logic_expression ) OPEN_SCOPE','loop',5,'p_loop','mozart_parser.py',51),
  ('if_conditional -> IF ( logic_expression ) OPEN_SCOPE','if_conditional',5,'p_if_conditional','mozart_parser.py',56),
  ('else_conditional -> END_SCOPE ELSE OPEN_SCOPE','else_conditional',3,'p_else_conditional','mozart_parser.py',62),
  ('register_command -> REGISTER ( expression )','register_command',4,'p_register_command','mozart_parser.py',68),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','mozart_parser.py',93),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','mozart_parser.py',94),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','mozart_parser.py',95),
  ('arithmetic_operator -> DIVISION','arithmetic_operator',1,'p_arithmetic_operator','mozart_parser.py',96),
  ('arithmetic_operator -> MODULO','arithmetic_operator',1,'p_arithmetic_operator','mozart_parser.py',97),
  ('binary_logic_operator -> AND','binary_logic_operator',1,'p_binary_logic_operator','mozart_parser.py',102),
  ('binary_logic_operator -> OR','binary_logic_operator',1,'p_binary_logic_operator','mozart_parser.py',103),
  ('unary_logic_operator -> NOT','unary_logic_operator',1,'p_unary_logic_operator','mozart_parser.py',108),
  ('comparative_operator -> GT','comparative_operator',1,'p_comparative_operator','mozart_parser.py',113),
  ('comparative_operator -> LT','comparative_operator',1,'p_comparative_operator','mozart_parser.py',114),
  ('comparative_operator -> GE','comparative_operator',1,'p_comparative_operator','mozart_parser.py',115),
  ('comparative_operator -> LE','comparative_operator',1,'p_comparative_operator','mozart_parser.py',116),
  ('comparative_operator -> EQUAL','comparative_operator',1,'p_comparative_operator','mozart_parser.py',117),
  ('comparative_operator -> NOT_EQUAL','comparative_operator',1,'p_comparative_operator','mozart_parser.py',118),
  ('unary_operator -> unary_logic_operator','unary_operator',1,'p_unary_operator','mozart_parser.py',123),
  ('binary_operator -> arithmetic_operator','binary_operator',1,'p_binary_operator','mozart_parser.py',128),
  ('binary_operator -> comparative_operator','binary_operator',1,'p_binary_operator','mozart_parser.py',129),
  ('binary_operator -> binary_logic_operator','binary_operator',1,'p_binary_operator','mozart_parser.py',130),
  ('note -> ( REAL COMMA REAL COMMA INTEGER )','note',7,'p_NOTE','mozart_parser.py',136),
  ('integer_list -> INTEGER','integer_list',1,'p_INTEGER_LIST','mozart_parser.py',141),
  ('integer_list -> integer_list COMMA INTEGER','integer_list',3,'p_INTEGER_LIST','mozart_parser.py',142),
  ('scale -> [ integer_list ]','scale',3,'p_SCALE','mozart_parser.py',151),
  ('chord -> ( INTEGER COMMA INTEGER COMMA INTEGER )','chord',7,'p_CHORD','mozart_parser.py',156),
  ('chord_list -> chord','chord_list',1,'p_chord_list','mozart_parser.py',161),
  ('chord_list -> chord_list COMMA chord','chord_list',3,'p_chord_list','mozart_parser.py',162),
  ('harmonic_field -> [ chord_list ]','harmonic_field',3,'p_harmonic_field','mozart_parser.py',171),
  ('note_list -> note','note_list',1,'p_note_list','mozart_parser.py',176),
  ('note_list -> note_list COMMA note','note_list',3,'p_note_list','mozart_parser.py',177),
  ('music -> ( [ note_list ] COMMA REAL )','music',7,'p_music','mozart_parser.py',186),
  ('music -> ( [ ] COMMA REAL )','music',6,'p_music','mozart_parser.py',187),
  ('variable_attribution -> IDENTIFIER = expression','variable_attribution',3,'p_variable_attribution','mozart_parser.py',196),
  ('variable_declaration -> VARIABLE_TYPE IDENTIFIER = expression','variable_declaration',4,'p_variable_declaration','mozart_parser.py',216),
  ('literal -> INTEGER','literal',1,'p_literal','mozart_parser.py',232),
  ('literal -> REAL','literal',1,'p_literal','mozart_parser.py',233),
  ('literal -> BOOLEAN','literal',1,'p_literal','mozart_parser.py',234),
  ('literal -> note','literal',1,'p_literal','mozart_parser.py',235),
  ('literal -> scale','literal',1,'p_literal','mozart_parser.py',236),
  ('literal -> chord','literal',1,'p_literal','mozart_parser.py',237),
  ('literal -> harmonic_field','literal',1,'p_literal','mozart_parser.py',238),
  ('literal -> music','literal',1,'p_literal','mozart_parser.py',239),
  ('expression -> arithmetic_expression','expression',1,'p_expression','mozart_parser.py',244),
  ('expression -> logic_expression','expression',1,'p_expression','mozart_parser.py',245),
  ('expression -> literal','expression',1,'p_expression','mozart_parser.py',246),
  ('expression -> builtin_functions','expression',1,'p_expression','mozart_parser.py',247),
  ('builtin_functions -> PREDEFINED_IDENTIFIER ( params_list )','builtin_functions',4,'p_builtin_functions','mozart_parser.py',252),
  ('params_list -> expression','params_list',1,'p_params_list','mozart_parser.py',270),
  ('params_list -> params_list COMMA expression','params_list',3,'p_params_list','mozart_parser.py',271),
  ('arithmetic_expression -> arithmetic_literal','arithmetic_expression',1,'p_arithmetic_expression','mozart_parser.py',280),
  ('arithmetic_expression -> ( arithmetic_expression )','arithmetic_expression',3,'p_arithmetic_expression','mozart_parser.py',281),
  ('arithmetic_expression -> IDENTIFIER','arithmetic_expression',1,'p_arithmetic_expression','mozart_parser.py',282),
  ('arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression','mozart_parser.py',283),
  ('logic_expression -> BOOLEAN','logic_expression',1,'p_logic_expression','mozart_parser.py',329),
  ('logic_expression -> IDENTIFIER','logic_expression',1,'p_logic_expression','mozart_parser.py',330),
  ('logic_expression -> ( logic_expression )','logic_expression',3,'p_logic_expression','mozart_parser.py',331),
  ('logic_expression -> ( arithmetic_expression comparative_operator arithmetic_expression )','logic_expression',5,'p_logic_expression','mozart_parser.py',332),
  ('logic_expression -> logic_expression binary_logic_operator logic_expression','logic_expression',3,'p_logic_expression','mozart_parser.py',333),
  ('logic_expression -> unary_logic_operator logic_expression','logic_expression',2,'p_logic_expression','mozart_parser.py',334),
  ('arithmetic_literal -> REAL','arithmetic_literal',1,'p_arithmetic_literal','mozart_parser.py',401),
  ('arithmetic_literal -> INTEGER','arithmetic_literal',1,'p_arithmetic_literal','mozart_parser.py',402),
]
