
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftTIMESDIVISIONleftCOMMAAND BOOLEAN COMMA DIVISION ELSE END EQUAL GE GT IDENTIFIER IF INTEGER LE LT MINUS MODULO NOT NOT_EQUAL OR PLUS PREDEFINED_IDENTIFIER REAL REGISTER TIMES VARIABLE_TYPE WHILEprogram : "{" command "}"command : command commandcommand : loopcommand : if_conditionalcommand : if_else_conditionalcommand : variable_attribution ENDcommand : variable_declaration ENDcommand : register_command ENDloop : WHILE "(" logic_expression ")" "{" command "}"if_conditional : IF "(" logic_expression ")" "{" command "}"if_else_conditional : IF "(" logic_expression ")" "{" command "}" ELSE "{" command "}"register_command : REGISTER "(" expression ")"arithmetic_operator : PLUS\n                           | MINUS\n                           | TIMES\n                           | DIVISION\n                           | MODULObinary_logic_operator : AND\n                             | ORunary_logic_operator : NOTcomparative_operator : GT\n                            | LT\n                            | GE\n                            | LE\n                            | EQUAL\n                            | NOT_EQUALunary_operator : unary_logic_operatorbinary_operator : arithmetic_operator\n                       | comparative_operator\n                       | binary_logic_operatornote : "(" REAL COMMA REAL COMMA INTEGER ")"integer_list : INTEGER\n                    | integer_list COMMA INTEGERscale : "[" integer_list "]"chord : "(" INTEGER COMMA INTEGER COMMA INTEGER ")"chord_list : chord\n                  | chord_list COMMA chordharmonic_field : "[" chord_list "]"note_list : note\n                 | note_list COMMA notemusic : "(" "[" note_list "]" COMMA REAL ")"\n             | "(" "[" "]" COMMA REAL ")" variable_attribution : IDENTIFIER "=" expressionvariable_declaration : VARIABLE_TYPE IDENTIFIER "=" expressionliteral : note\n               | scale\n               | chord\n               | harmonic_field\n               | musicliteral : INTEGER\n               | REAL\n               | BOOLEAN\n               expression : arithmetic_expression\n                  | logic_expression\n                  | literal\n                  | builtin_functionsbuiltin_functions : PREDEFINED_IDENTIFIER "(" params_list ")"params_list : expression\n                   | params_list COMMA expressionarithmetic_expression : IDENTIFIERarithmetic_expression : arithmetic_literalarithmetic_expression : "(" arithmetic_expression ")"arithmetic_expression : arithmetic_expression arithmetic_operator arithmetic_expressionlogic_expression : BOOLEANlogic_expression : IDENTIFIERlogic_expression : "(" logic_expression ")"logic_expression : "(" arithmetic_expression comparative_operator arithmetic_expression ")"logic_expression : logic_expression binary_logic_operator logic_expressionlogic_expression : unary_logic_operator logic_expressionarithmetic_literal : REALarithmetic_literal : INTEGER'
    
_lr_action_items = {'{':([0,58,63,135,],[2,92,94,140,]),'$end':([1,16,],[0,-1,]),'WHILE':([2,3,4,5,6,15,17,18,19,92,94,113,114,127,128,140,144,145,],[10,10,-3,-4,-5,10,-6,-7,-8,10,10,10,10,-9,-10,10,10,-11,]),'IF':([2,3,4,5,6,15,17,18,19,92,94,113,114,127,128,140,144,145,],[11,11,-3,-4,-5,11,-6,-7,-8,11,11,11,11,-9,-10,11,11,-11,]),'IDENTIFIER':([2,3,4,5,6,13,15,17,18,19,20,21,22,24,25,29,30,39,50,52,59,60,61,64,65,66,67,68,69,70,75,85,86,87,88,89,90,91,92,94,97,113,114,123,127,128,140,144,145,],[12,12,-3,-4,-5,23,12,-6,-7,-8,28,28,32,32,55,28,-20,32,32,55,28,-18,-19,96,-13,-14,-15,-16,-17,32,32,96,-21,-22,-23,-24,-25,-26,12,12,96,12,12,32,-9,-10,12,12,-11,]),'VARIABLE_TYPE':([2,3,4,5,6,15,17,18,19,92,94,113,114,127,128,140,144,145,],[13,13,-3,-4,-5,13,-6,-7,-8,13,13,13,13,-9,-10,13,13,-11,]),'REGISTER':([2,3,4,5,6,15,17,18,19,92,94,113,114,127,128,140,144,145,],[14,14,-3,-4,-5,14,-6,-7,-8,14,14,14,14,-9,-10,14,14,-11,]),'}':([3,4,5,6,15,17,18,19,113,114,127,128,144,145,],[16,-3,-4,-5,-2,-6,-7,-8,127,128,-9,-10,145,-11,]),'END':([7,8,9,27,28,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,56,57,62,81,82,84,93,95,96,98,107,109,122,126,139,141,142,143,],[17,18,19,-64,-65,-60,-43,-53,-54,-55,-56,-61,-52,-45,-46,-47,-48,-49,-50,-51,-70,-71,-69,-44,-12,-66,-68,-63,-60,-62,-34,-38,-57,-67,-42,-31,-35,-41,]),'(':([10,11,14,20,21,22,24,25,29,30,39,48,49,50,52,59,60,61,64,65,66,67,68,69,70,74,75,85,86,87,88,89,90,91,97,110,120,123,],[20,21,24,25,25,39,39,52,25,-20,70,75,80,39,52,25,-18,-19,97,-13,-14,-15,-16,-17,70,101,39,97,-21,-22,-23,-24,-25,-26,97,80,101,39,]),'=':([12,23,],[22,50,]),'BOOLEAN':([20,21,22,24,25,29,30,39,50,52,59,60,61,70,75,123,],[27,27,40,40,27,27,-20,27,40,27,27,-18,-19,27,40,40,]),'NOT':([20,21,22,24,25,29,30,39,50,52,59,60,61,70,75,123,],[30,30,30,30,30,30,-20,30,30,30,30,-18,-19,30,30,30,]),'INTEGER':([22,24,25,39,49,50,52,64,65,66,67,68,69,70,75,80,85,86,87,88,89,90,91,97,100,108,123,129,130,],[46,46,57,73,78,46,57,57,-13,-14,-15,-16,-17,57,46,111,57,-21,-22,-23,-24,-25,-26,57,117,124,46,136,137,]),'REAL':([22,24,25,39,50,52,64,65,66,67,68,69,70,75,85,86,87,88,89,90,91,97,99,101,121,123,131,],[47,47,56,72,47,56,56,-13,-14,-15,-16,-17,56,47,56,-21,-22,-23,-24,-25,-26,56,116,118,133,47,138,]),'PREDEFINED_IDENTIFIER':([22,24,50,75,123,],[48,48,48,48,48,]),'[':([22,24,39,50,75,123,],[49,49,74,49,49,49,]),')':([26,27,28,31,32,34,35,36,37,38,40,41,42,43,44,45,46,47,51,53,55,56,57,62,71,72,73,83,84,93,95,96,98,105,106,107,109,112,115,122,126,133,134,136,137,138,139,141,142,143,],[58,-64,-65,63,-60,-53,-54,-55,-56,-61,-52,-45,-46,-47,-48,-49,-50,-51,82,84,-60,-70,-71,-69,98,-70,-71,98,-66,-68,-63,-60,-62,122,-58,-34,-38,126,98,-57,-67,139,-59,141,142,143,-42,-31,-35,-41,]),'AND':([26,27,28,31,32,35,40,53,55,62,84,93,126,],[60,-64,-65,60,-65,60,-64,60,-65,60,-66,60,-67,]),'OR':([26,27,28,31,32,35,40,53,55,62,84,93,126,],[61,-64,-65,61,-65,61,-64,61,-65,61,-66,61,-67,]),'COMMA':([27,28,32,34,35,36,37,38,40,41,42,43,44,45,46,47,56,57,62,72,73,76,77,78,79,84,93,95,96,98,102,103,104,105,106,107,109,111,116,117,118,119,122,124,125,126,132,134,139,141,142,143,],[-64,-65,-60,-53,-54,-55,-56,-61,-52,-45,-46,-47,-48,-49,-50,-51,-70,-71,-69,99,100,108,110,-32,-36,-66,-68,-63,-60,-62,120,121,-39,123,-58,-34,-38,100,129,130,99,131,-57,-33,-37,-67,-40,-59,-42,-31,-35,-41,]),'PLUS':([32,34,38,46,47,54,55,56,57,71,72,73,83,95,96,98,112,115,],[-60,65,-61,-71,-70,65,-60,-70,-71,65,-70,-71,65,65,-60,-62,65,65,]),'MINUS':([32,34,38,46,47,54,55,56,57,71,72,73,83,95,96,98,112,115,],[-60,66,-61,-71,-70,66,-60,-70,-71,66,-70,-71,66,66,-60,-62,66,66,]),'TIMES':([32,34,38,46,47,54,55,56,57,71,72,73,83,95,96,98,112,115,],[-60,67,-61,-71,-70,67,-60,-70,-71,67,-70,-71,67,67,-60,-62,67,67,]),'DIVISION':([32,34,38,46,47,54,55,56,57,71,72,73,83,95,96,98,112,115,],[-60,68,-61,-71,-70,68,-60,-70,-71,68,-70,-71,68,68,-60,-62,68,68,]),'MODULO':([32,34,38,46,47,54,55,56,57,71,72,73,83,95,96,98,112,115,],[-60,69,-61,-71,-70,69,-60,-70,-71,69,-70,-71,69,69,-60,-62,69,69,]),'GT':([32,38,54,55,56,57,71,72,73,83,95,96,98,],[-60,-61,86,-60,-70,-71,86,-70,-71,86,-63,-60,-62,]),'LT':([32,38,54,55,56,57,71,72,73,83,95,96,98,],[-60,-61,87,-60,-70,-71,87,-70,-71,87,-63,-60,-62,]),'GE':([32,38,54,55,56,57,71,72,73,83,95,96,98,],[-60,-61,88,-60,-70,-71,88,-70,-71,88,-63,-60,-62,]),'LE':([32,38,54,55,56,57,71,72,73,83,95,96,98,],[-60,-61,89,-60,-70,-71,89,-70,-71,89,-63,-60,-62,]),'EQUAL':([32,38,54,55,56,57,71,72,73,83,95,96,98,],[-60,-61,90,-60,-70,-71,90,-70,-71,90,-63,-60,-62,]),'NOT_EQUAL':([32,38,54,55,56,57,71,72,73,83,95,96,98,],[-60,-61,91,-60,-70,-71,91,-70,-71,91,-63,-60,-62,]),']':([74,76,77,78,79,102,104,124,125,132,141,142,],[103,107,109,-32,-36,119,-39,-33,-37,-40,-31,-35,]),'ELSE':([128,],[135,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'command':([2,3,15,92,94,113,114,140,144,],[3,15,15,113,114,15,15,144,15,]),'loop':([2,3,15,92,94,113,114,140,144,],[4,4,4,4,4,4,4,4,4,]),'if_conditional':([2,3,15,92,94,113,114,140,144,],[5,5,5,5,5,5,5,5,5,]),'if_else_conditional':([2,3,15,92,94,113,114,140,144,],[6,6,6,6,6,6,6,6,6,]),'variable_attribution':([2,3,15,92,94,113,114,140,144,],[7,7,7,7,7,7,7,7,7,]),'variable_declaration':([2,3,15,92,94,113,114,140,144,],[8,8,8,8,8,8,8,8,8,]),'register_command':([2,3,15,92,94,113,114,140,144,],[9,9,9,9,9,9,9,9,9,]),'logic_expression':([20,21,22,24,25,29,39,50,52,59,70,75,123,],[26,31,35,35,53,62,53,35,53,93,53,35,35,]),'unary_logic_operator':([20,21,22,24,25,29,39,50,52,59,70,75,123,],[29,29,29,29,29,29,29,29,29,29,29,29,29,]),'expression':([22,24,50,75,123,],[33,51,81,106,134,]),'arithmetic_expression':([22,24,25,39,50,52,64,70,75,85,97,123,],[34,34,54,71,34,83,95,71,34,112,115,34,]),'literal':([22,24,50,75,123,],[36,36,36,36,36,]),'builtin_functions':([22,24,50,75,123,],[37,37,37,37,37,]),'arithmetic_literal':([22,24,25,39,50,52,64,70,75,85,97,123,],[38,38,38,38,38,38,38,38,38,38,38,38,]),'note':([22,24,50,74,75,120,123,],[41,41,41,104,41,132,41,]),'scale':([22,24,50,75,123,],[42,42,42,42,42,]),'chord':([22,24,49,50,75,110,123,],[43,43,79,43,43,125,43,]),'harmonic_field':([22,24,50,75,123,],[44,44,44,44,44,]),'music':([22,24,50,75,123,],[45,45,45,45,45,]),'binary_logic_operator':([26,31,35,53,62,93,],[59,59,59,59,59,59,]),'arithmetic_operator':([34,54,71,83,95,112,115,],[64,64,64,64,64,64,64,]),'integer_list':([49,],[76,]),'chord_list':([49,],[77,]),'comparative_operator':([54,71,83,],[85,85,85,]),'note_list':([74,],[102,]),'params_list':([75,],[105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> { command }','program',3,'p_program','mozart_parser.py',35),
  ('command -> command command','command',2,'p_command_command_command','mozart_parser.py',41),
  ('command -> loop','command',1,'p_command_loop','mozart_parser.py',46),
  ('command -> if_conditional','command',1,'p_command_if_conditional','mozart_parser.py',51),
  ('command -> if_else_conditional','command',1,'p_command_if_else_conditional','mozart_parser.py',56),
  ('command -> variable_attribution END','command',2,'p_command_variable_attribution','mozart_parser.py',61),
  ('command -> variable_declaration END','command',2,'p_command_variable_declaration','mozart_parser.py',66),
  ('command -> register_command END','command',2,'p_command_register','mozart_parser.py',71),
  ('loop -> WHILE ( logic_expression ) { command }','loop',7,'p_loop','mozart_parser.py',76),
  ('if_conditional -> IF ( logic_expression ) { command }','if_conditional',7,'p_if_conditional','mozart_parser.py',81),
  ('if_else_conditional -> IF ( logic_expression ) { command } ELSE { command }','if_else_conditional',11,'p_if_else_conditional','mozart_parser.py',86),
  ('register_command -> REGISTER ( expression )','register_command',4,'p_register_command','mozart_parser.py',91),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','mozart_parser.py',102),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','mozart_parser.py',103),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','mozart_parser.py',104),
  ('arithmetic_operator -> DIVISION','arithmetic_operator',1,'p_arithmetic_operator','mozart_parser.py',105),
  ('arithmetic_operator -> MODULO','arithmetic_operator',1,'p_arithmetic_operator','mozart_parser.py',106),
  ('binary_logic_operator -> AND','binary_logic_operator',1,'p_binary_logic_operator','mozart_parser.py',111),
  ('binary_logic_operator -> OR','binary_logic_operator',1,'p_binary_logic_operator','mozart_parser.py',112),
  ('unary_logic_operator -> NOT','unary_logic_operator',1,'p_unary_logic_operator','mozart_parser.py',117),
  ('comparative_operator -> GT','comparative_operator',1,'p_comparative_operator','mozart_parser.py',122),
  ('comparative_operator -> LT','comparative_operator',1,'p_comparative_operator','mozart_parser.py',123),
  ('comparative_operator -> GE','comparative_operator',1,'p_comparative_operator','mozart_parser.py',124),
  ('comparative_operator -> LE','comparative_operator',1,'p_comparative_operator','mozart_parser.py',125),
  ('comparative_operator -> EQUAL','comparative_operator',1,'p_comparative_operator','mozart_parser.py',126),
  ('comparative_operator -> NOT_EQUAL','comparative_operator',1,'p_comparative_operator','mozart_parser.py',127),
  ('unary_operator -> unary_logic_operator','unary_operator',1,'p_unary_operator','mozart_parser.py',132),
  ('binary_operator -> arithmetic_operator','binary_operator',1,'p_binary_operator','mozart_parser.py',137),
  ('binary_operator -> comparative_operator','binary_operator',1,'p_binary_operator','mozart_parser.py',138),
  ('binary_operator -> binary_logic_operator','binary_operator',1,'p_binary_operator','mozart_parser.py',139),
  ('note -> ( REAL COMMA REAL COMMA INTEGER )','note',7,'p_NOTE','mozart_parser.py',145),
  ('integer_list -> INTEGER','integer_list',1,'p_INTEGER_LIST','mozart_parser.py',150),
  ('integer_list -> integer_list COMMA INTEGER','integer_list',3,'p_INTEGER_LIST','mozart_parser.py',151),
  ('scale -> [ integer_list ]','scale',3,'p_SCALE','mozart_parser.py',160),
  ('chord -> ( INTEGER COMMA INTEGER COMMA INTEGER )','chord',7,'p_CHORD','mozart_parser.py',165),
  ('chord_list -> chord','chord_list',1,'p_chord_list','mozart_parser.py',170),
  ('chord_list -> chord_list COMMA chord','chord_list',3,'p_chord_list','mozart_parser.py',171),
  ('harmonic_field -> [ chord_list ]','harmonic_field',3,'p_harmonic_field','mozart_parser.py',180),
  ('note_list -> note','note_list',1,'p_note_list','mozart_parser.py',185),
  ('note_list -> note_list COMMA note','note_list',3,'p_note_list','mozart_parser.py',186),
  ('music -> ( [ note_list ] COMMA REAL )','music',7,'p_music','mozart_parser.py',195),
  ('music -> ( [ ] COMMA REAL )','music',6,'p_music','mozart_parser.py',196),
  ('variable_attribution -> IDENTIFIER = expression','variable_attribution',3,'p_variable_attribution','mozart_parser.py',205),
  ('variable_declaration -> VARIABLE_TYPE IDENTIFIER = expression','variable_declaration',4,'p_variable_declaration','mozart_parser.py',211),
  ('literal -> note','literal',1,'p_literal_not_primitive','mozart_parser.py',216),
  ('literal -> scale','literal',1,'p_literal_not_primitive','mozart_parser.py',217),
  ('literal -> chord','literal',1,'p_literal_not_primitive','mozart_parser.py',218),
  ('literal -> harmonic_field','literal',1,'p_literal_not_primitive','mozart_parser.py',219),
  ('literal -> music','literal',1,'p_literal_not_primitive','mozart_parser.py',220),
  ('literal -> INTEGER','literal',1,'p_literal_primitive','mozart_parser.py',225),
  ('literal -> REAL','literal',1,'p_literal_primitive','mozart_parser.py',226),
  ('literal -> BOOLEAN','literal',1,'p_literal_primitive','mozart_parser.py',227),
  ('expression -> arithmetic_expression','expression',1,'p_expression','mozart_parser.py',233),
  ('expression -> logic_expression','expression',1,'p_expression','mozart_parser.py',234),
  ('expression -> literal','expression',1,'p_expression','mozart_parser.py',235),
  ('expression -> builtin_functions','expression',1,'p_expression','mozart_parser.py',236),
  ('builtin_functions -> PREDEFINED_IDENTIFIER ( params_list )','builtin_functions',4,'p_builtin_functions','mozart_parser.py',255),
  ('params_list -> expression','params_list',1,'p_params_list','mozart_parser.py',260),
  ('params_list -> params_list COMMA expression','params_list',3,'p_params_list','mozart_parser.py',261),
  ('arithmetic_expression -> IDENTIFIER','arithmetic_expression',1,'p_arithmetic_expression_value','mozart_parser.py',270),
  ('arithmetic_expression -> arithmetic_literal','arithmetic_expression',1,'p_arithmetic_expression_identifier','mozart_parser.py',275),
  ('arithmetic_expression -> ( arithmetic_expression )','arithmetic_expression',3,'p_arithmetic_expression_in_brackets','mozart_parser.py',280),
  ('arithmetic_expression -> arithmetic_expression arithmetic_operator arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression_operation','mozart_parser.py',285),
  ('logic_expression -> BOOLEAN','logic_expression',1,'p_logic_expression_boolean','mozart_parser.py',290),
  ('logic_expression -> IDENTIFIER','logic_expression',1,'p_logic_expression_identifier','mozart_parser.py',295),
  ('logic_expression -> ( logic_expression )','logic_expression',3,'p_logic_expression_in_brackets','mozart_parser.py',300),
  ('logic_expression -> ( arithmetic_expression comparative_operator arithmetic_expression )','logic_expression',5,'p_logic_expression_ae_co_ae','mozart_parser.py',305),
  ('logic_expression -> logic_expression binary_logic_operator logic_expression','logic_expression',3,'p_logic_expression_le_lo_le','mozart_parser.py',310),
  ('logic_expression -> unary_logic_operator logic_expression','logic_expression',2,'p_logic_expression_uo_le','mozart_parser.py',315),
  ('arithmetic_literal -> REAL','arithmetic_literal',1,'p_arithmetic_literal_real','mozart_parser.py',320),
  ('arithmetic_literal -> INTEGER','arithmetic_literal',1,'p_arithmetic_literal_integer','mozart_parser.py',325),
]
